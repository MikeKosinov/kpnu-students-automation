2.1. Використання окремих гілок для виконання завдань
Цей підхід забезпечує структуровану та безпечну розробку, дозволяючи кожному розробнику працювати ізольовано над своїм завданням. Основні переваги:

- Ізоляція змін: кожна гілка містить лише код, пов'язаний із конкретним завданням (наприклад, нова функція, виправлення багу).
- Зручність тестування: зміни можна протестувати окремо, не впливаючи на основну гілку (main/master) або гілки інших розробників.
- Легкість управління конфліктами: використання окремих гілок дозволяє вирішувати конфлікти при злитті локально, без втручання в загальний код.
- Трасування задач: кожна гілка може бути пов’язана з конкретною задачею в системі трекінгу, що робить простішим контроль прогресу.
Наприклад, якщо команда працює над додатком для онлайн-магазину, гілка feature/add-to-cart може використовуватися для додавання функціональності кошика, а bugfix/login-issue — для виправлення помилки у формі входу.


2.2. Захист гілок від злиття без код-рев'ю старшими розробниками
Цей підхід запобігає впровадженню потенційно дефектного або некоректного коду в основну гілку. Переваги:

- Контроль якості: код перевіряється досвідченим розробником або командою перед злиттям.
- Виявлення помилок: код-рев’ю дозволяє виявити помилки або погані практики до того, як вони потраплять у основну гілку.
- Обмін знаннями: під час рев'ю старші розробники можуть надати рекомендації або навчити молодших членів команди.
- Забезпечення відповідності стандартам: рев'ю гарантує, що код відповідає прийнятим стандартам проекту.

Приклад: у великому проекті, наприклад, соціальна мережа, зміни до базової функції авторизації можуть призвести до серйозних проблем у безпеці. Захист від необдуманого злиття допомагає уникнути цих ризиків.


2.3. Для чого необхідний CI/CD процес, та його значення у управлінні проектами
CI/CD (Continuous Integration/Continuous Deployment) — це підхід автоматизації, який допомагає інтегрувати зміни та розгортати код швидко, безпечно та послідовно.

Значення CI/CD у проектному менеджменті:
- Швидкий зворотний зв'язок: розробники швидко дізнаються, якщо їх зміни спричинили помилки.
- Підвищення стабільності: автоматичне тестування та збірка гарантують, що в основну гілку потрапляє лише перевірений код.
- Швидке розгортання: зміни можна швидко доставити до кінцевого користувача.
- Зменшення людського фактора: автоматизація знижує ризик помилок, спричинених ручним втручанням.


Приклад: Є сервіс доставки їжі, наприклад, Glovo.
Розробники впроваджували новий функціонал для розрахунку вартості доставки залежно від відстані.
Після внесення змін у код і злиття їх у репозиторій виявилося, що обрахунок вартості для віддалених замовлень відбувається некоректно.
Розробники швидко виправили помилку, але, під час перевірки тестувальниками, з’ясувалося, що виправлення вплинуло на інші критичні функції, наприклад, розрахунок часу доставки.
Без CI/CD цей процес міг би зайняти кілька ітерацій, оскільки зміни тестуються вручну, а помилки виявляються вже після впровадження у код. Це збільшує час розробки та впливає на якість сервісу, що може призвести до втрати клієнтів.
Рішення з CI/CD:
- CI (Continuous Integration): автоматичні тести запускаються одразу після внесення змін у репозиторій. Якби були впроваджені автоматизовані модульні тести, вони б виявили помилку у функціоналі обрахунку вартості доставки на етапі інтеграції.
- CD (Continuous Deployment): система автоматично перевіряє, чи новий код не порушує основний функціонал, і виконує автоматичний деплой лише у разі успішного проходження тестів.
Таким чином, CI/CD дозволяє оперативно виявляти та виправляти дефекти до потрапляння їх у виробниче середовище, захищаючи репутацію сервісу та забезпечуючи стабільну роботу системи.